from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, delete
from utils import tourn_cache

from config import asession, token
from tournaments import morph
from tables import TournamentsTable, RegistrationsTable, UsersTable, AdminsTable

ad_tourn = Router()


class TournCreate(StatesGroup):
    club = State()
    name = State()
    desc = State()
    distance = State()
    date = State()
    federation = State()
    type = State()
    cost = State()
    limit = State()
    status = State()
    pfp = State()


class TournEdit(StatesGroup):
    num = State()
    field = State()
    in_bd = State()


class TournDelete(StatesGroup):
    confirm = State()


class Newsletter(StatesGroup):
    num = State()
    text = State()
    confirm = State()


class AdminAdd(StatesGroup):
    club = State()
    id = State()


class AdminRemove(StatesGroup):
    club = State()
    id = State()


@ad_tourn.callback_query(F.data[:12] == 'create_tourn')
async def create_tournament1(callback: CallbackQuery, state: FSMContext):
    await state.update_data(club=callback.data[12:])
    await state.set_state(TournCreate.name)
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")


@ad_tourn.message(TournCreate.name)
async def create_tournament2(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(TournCreate.desc)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")


@ad_tourn.message(TournCreate.desc)
async def create_tournament3(message: Message, state: FSMContext):
    await state.update_data(desc=message.text)
    await state.set_state(TournCreate.distance)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")


@ad_tourn.message(TournCreate.distance)
async def create_tournament4(message: Message, state: FSMContext):
    try:
        int(message.text)
    except:
        await message.answer("‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä —á–∏—Å–ª–æ–º:")
        return
    await state.update_data(distance=message.text)
    await state.set_state(TournCreate.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞:")


@ad_tourn.message(TournCreate.date)
async def create_tournament5(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await state.set_state(TournCreate.federation)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–µ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç—É—Ä–Ω–∏—Ä (Polemica, –§–°–ú, –ú–°–õ):")


@ad_tourn.message(TournCreate.federation)
async def create_tournament6(message: Message, state: FSMContext):
    await state.update_data(federation=message.text)
    await state.set_state(TournCreate.type)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–õ–∏—á–Ω—ã–π"), KeyboardButton(text="–ö–æ–º–∞–Ω–¥–Ω—ã–π")]],
                                 resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞:", reply_markup=markup)


@ad_tourn.message(TournCreate.type)
async def create_tournament7(message: Message, state: FSMContext):
    await state.update_data(type=False if message.text == "–ö–æ–º–∞–Ω–¥–Ω—ã–π" else True)
    await state.set_state(TournCreate.cost)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö). –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –≤–≤–µ–¥–∏—Ç–µ 0:")


@ad_tourn.message(TournCreate.cost)
async def create_tournament8(message: Message, state: FSMContext):
    try:
        int(message.text)
    except:
        await message.answer(
            "‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ä—É–±–ª—è—Ö. –ï—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –≤–≤–µ–¥–∏—Ç–µ 0:")
        return
    await state.update_data(cost=message.text)
    await state.set_state(TournCreate.limit)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")


@ad_tourn.message(TournCreate.limit)
async def create_tournament9(message: Message, state: FSMContext):
    try:
        int(message.text)
    except:
        await message.answer("‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:")
        return
    await state.update_data(limit=message.text)
    await state.set_state(TournCreate.status)
    markup = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="–°–∫—Ä—ã—Ç—ã–π"),
        KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—ã–π"),
        KeyboardButton(text="–ü–æ –∑–∞—è–≤–∫–∞–º")
    ]], one_time_keyboard=True, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:", reply_markup=markup)


@ad_tourn.message(TournCreate.status)
async def create_tournament10(message: Message, state: FSMContext):
    await state.update_data(status=2 if message.text == "–ü–æ –∑–∞—è–≤–∫–∞–º" else (1 if message.text == "–û—Ç–∫—Ä—ã—Ç—ã–π" else 0))
    await state.set_state(TournCreate.pfp)
    markup = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    ]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("üì∑–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é-–æ–±–ª–æ–∂–∫—É —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)


@ad_tourn.message(TournCreate.pfp)
async def create_tournament11(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(pfp=message.photo[-1].file_id)
    data = await state.get_data()
    await state.clear()
    async with asession() as session:
        new_tournament = TournamentsTable(club=data["club"],
                                          name=data["name"],
                                          desc=data["desc"],
                                          distance=data["distance"],
                                          date=data["date"],
                                          federation=data["federation"],
                                          type=data["type"],
                                          cost=data["cost"],
                                          limit=data["limit"],
                                          status=data["status"])
        if "pfp" in data:
            new_tournament.pfp = data["pfp"]
        session.add(new_tournament)
        await session.flush()
        tourn_id = new_tournament.num
        await session.commit()
    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üèÜ–¢—É—Ä–Ω–∏—Ä", callback_data="admin_tourn_info" + str(tourn_id))]])
    await message.answer("üéâ–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=markup)


@ad_tourn.callback_query(F.data[:10] == 'edit_tourn')
async def edit_tournament1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TournEdit.field)
    await state.update_data(num=callback.data[10:])
    markup = ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ"),
            KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ"),
            KeyboardButton(text="–î–∏—Å—Ç–∞–Ω—Ü–∏—è")
        ],
        [
            KeyboardButton(text="–î–∞—Ç–∞"),
            KeyboardButton(text="–§–µ–¥–µ—Ä–∞—Ü–∏—è"),
            KeyboardButton(text="–°—Ç–æ–∏–º–æ—Å—Ç—å")
        ],
        [
            KeyboardButton(text="–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
            KeyboardButton(text="–°—Ç–∞—Ç—É—Å"),
            KeyboardButton(text="–ö–∞—Ä—Ç–∏–Ω–∫—É")
        ]
    ], resize_keyboard=True, one_time_keyboard=True)
    await callback.answer()
    await callback.message.answer("üïπ–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=markup)


@ad_tourn.message(TournEdit.field)
async def edit_tournament2(message: Message, state: FSMContext):
    await state.set_state(TournEdit.in_bd)
    await state.update_data(field=message.text)
    if message.text == "–ö–∞—Ä—Ç–∏–Ω–∫—É":
        await message.answer("üì∑–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É:")
    if message.text != "–°—Ç–∞—Ç—É—Å":
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ {morph.parse("–Ω–æ–≤—ã–π")[0].
                             inflect({morph.parse(message.text.lower())[0].tag.gender}).word
                             if morph.parse(message.text.lower())[0].tag.gender else "–Ω–æ–≤—ã–π"} {message.text.lower()}")
        return
    markup = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="–°–∫—Ä—ã—Ç—ã–π"),
        KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—ã–π"),
        KeyboardButton(text="–ü–æ –∑–∞—è–≤–∫–∞–º"),
    ]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)


@ad_tourn.message(TournEdit.in_bd)
async def edit_tournament3(message: Message, state: FSMContext):
    data = await state.get_data()
    async with asession() as session:
        info = await session.get(TournamentsTable, int(data["num"]))
        match data["field"]:
            case "–ù–∞–∑–≤–∞–Ω–∏–µ":
                info.name = message.text
            case "–û–ø–∏—Å–∞–Ω–∏–µ":
                info.desc = message.text
            case "–î–∏—Å—Ç–∞–Ω—Ü–∏—è":
                try:
                    int(message.text)
                except:
                    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:")
                    return
                info.distance = int(message.text)
            case "–î–∞—Ç–∞":
                info.date = message.text
            case "–§–µ–¥–µ—Ä–∞—Ü–∏—è":
                info.federation = message.text
            case "–°—Ç–æ–∏–º–æ—Å—Ç—å":
                try:
                    int(message.text)
                except:
                    await message.answer("‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞:")
                    return
                info.cost = int(message.text)
            case "–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
                try:
                    int(message.text)
                except:
                    await message.answer("‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!\n–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:")
                    return
                info.limit = int(message.text)
            case "–°—Ç–∞—Ç—É—Å":
                info.status = 2 if message.text == "–ü–æ –∑–∞—è–≤–∫–∞–º" else (1 if message.text == "–û—Ç–∫—Ä—ã—Ç—ã–π" else 0)
            case "–ö–∞—Ä—Ç–∏–Ω–∫—É":
                if not message.photo:
                    await message.answer("‚ùå–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                    return
                info.pfp = message.photo[-1].file_id
        await session.commit()
    await state.clear()
    tourn_cache.clear()
    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üèÜ–¢—É—Ä–Ω–∏—Ä", callback_data="admin_tourn_info" + str(data["num"]))]])
    await message.answer("‚úÖ–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã!", reply_markup=markup)


@ad_tourn.callback_query(F.data[:12] == 'delete_tourn')
async def delete_tournament1(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TournDelete.confirm)
    await state.update_data(confirm=callback.data[12:])
    await callback.answer()
    await callback.message.answer("‚Äº–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä? –í–≤–µ–¥–∏—Ç–µ –î–ê –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")


@ad_tourn.message(TournDelete.confirm)
async def delete_tournament2(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    if message.text != "–î–ê":
        markup = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üèÜ–¢—É—Ä–Ω–∏—Ä", callback_data="admin_tourn_info" + str(data["confirm"]))]])
        await message.answer("‚ùé–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        return
    async with asession() as session:
        query = (delete(RegistrationsTable)
                 .where(RegistrationsTable.event_id == int(data["confirm"])))
        await session.execute(query)
        query = (delete(TournamentsTable)
                 .where(TournamentsTable.num == int(data["confirm"])))
        await session.execute(query)
        await session.commit()
    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìå–ú–µ–Ω—é", callback_data="menu")]])
    await message.answer("‚úÖ–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=markup)


@ad_tourn.callback_query(F.data[:10] == "newsletter")
async def newsletter1(callback: CallbackQuery, state: FSMContext):
    await state.update_data(num=int(callback.data[10:]))
    await state.set_state(Newsletter.text)
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]], resize_keyboard=True, one_time_keyboard=True)
    await callback.answer()
    await callback.message.answer("üí¨–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:", reply_markup=markup)


@ad_tourn.message(Newsletter.text)
async def newsletter2(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚ùé–û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    await state.update_data(text=message.text)
    await state.set_state(Newsletter.confirm)
    await message.answer("‚Äº–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n–í–≤–µ–¥–∏—Ç–µ –î–ê, —á—Ç–æ–±—ã —Ä–∞–∑–æ—Å–ª–∞—Ç—å")


@ad_tourn.message(Newsletter.confirm)
async def newsletter3(message: Message, state: FSMContext):
    if message.text != "–î–ê":
        await state.clear()
        await message.answer("‚ùé–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    data = await state.get_data()
    if data["num"] == 0:
        await newsletter4(message, data)
        return
    async with asession() as session:
        query = select(RegistrationsTable.user_id).where(data["num"] == RegistrationsTable.event_id)
        result = await session.execute(query)
        users = result.all()
        tourn_name = await session.get(TournamentsTable, data["num"])
    text = f"<b>{tourn_name.name}</b>\n\n{data["text"]}"
    if not users:
        await message.answer("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç!")
        return
    for i in users[0]:
        await token.send_message(i, text, parse_mode="html")
    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üèÜ–¢—É—Ä–Ω–∏—Ä", callback_data="admin_tourn_info" + str(data["num"])),
        InlineKeyboardButton(text="üìå–ú–µ–Ω—é", callback_data="menu")
    ]])
    await message.answer("üéâ–£—Å–ø–µ—à–Ω–æ!", reply_markup=markup)


async def newsletter4(message: Message, data: dict):
    async with asession() as session:
        query = select(UsersTable.id)
        result = await session.execute(query)
        users = result.all()[0]
    for i in users:
        await token.send_message(i, data["text"])
    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìå–ú–µ–Ω—é", callback_data="menu")
    ]])
    await message.answer("üéâ–£—Å–ø–µ—à–Ω–æ!", reply_markup=markup)


@ad_tourn.callback_query(F.data[:10] == "admin_list")
async def admin_list(callback: CallbackQuery):
    async with (asession() as session):
        query = select(UsersTable.nick, UsersTable.username, UsersTable.id, AdminsTable.clubs
                       ).join(AdminsTable, UsersTable.id == AdminsTable.id)
        result = await session.execute(query)
        all_admins = result.all()
    admins = []
    for i in all_admins:
        clubs = eval(i.clubs) if eval(i.clubs) is not None else []
        if callback.data[10:] in clubs:
            admins.append(i)
    markup = InlineKeyboardBuilder([[
        InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin" + callback.data[10:])
    ]])
    await callback.answer()
    if not admins:
        await callback.message.answer("üï≥–ê–¥–º–∏–Ω–æ–≤ –Ω–µ—Ç!", reply_markup=markup.as_markup())
        return
    text = ""
    cnt = 0
    for i in admins:
        cnt += 1
        text += f"{cnt}. {i.nick} - @{i.username} - {i.id}\n"
    markup.row(InlineKeyboardButton(text="‚ûñ–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin" + callback.data[10:]))
    await callback.message.answer(text, reply_markup=markup.as_markup())


@ad_tourn.callback_query(F.data[:9] == "add_admin")
async def add_admin1(callback: CallbackQuery, state: FSMContext):
    await state.update_data(club=callback.data[9:])
    await state.set_state(AdminAdd.id)
    await callback.answer()
    await callback.message.answer("#Ô∏è‚É£–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã, –ø—Ä–æ–ø–∏—Å–∞—Ç—å /id\n" +
                                  "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ id —Å—é–¥–∞:")


@ad_tourn.message(AdminAdd.id)
async def add_admin2(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    data = await state.get_data()
    await state.clear()
    try:
        await token.get_chat(data["id"])
    except:
        await message.answer("‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π id!")
        return
    async with asession() as session:
        query = select(AdminsTable).where(AdminsTable.id == data["id"])
        result = await session.execute(query)
        admin_user = result.all()[0][0]
        clubs = eval(admin_user.clubs) if eval(admin_user.clubs) is not None else []
        if data["club"] in clubs:
            await message.answer("üôç‚Äç‚ôÇÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            return
        if not admin_user:
            new_admin = AdminsTable(id=data["id"], clubs='['+data["club"]+']')
            session.add(new_admin)
        else:
            clubs.append(data["club"])
            admin_info = await session.get(AdminsTable, data["id"])
            admin_info.clubs = str(clubs)
        await session.commit()
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öô–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list"+data["club"])],
        [InlineKeyboardButton(text="üìå–ú–µ–Ω—é", callback_data="menu")]
    ])
    await message.answer("üéâ–ê–¥–º–∏–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=markup)


@ad_tourn.callback_query(F.data[:12] == "remove_admin")
async def remove_admin1(callback: CallbackQuery, state: FSMContext):
    await state.update_data(club=callback.data[12:])
    await state.set_state(AdminRemove.id)
    await callback.answer()
    await callback.message.answer("#Ô∏è‚É£–í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ")


@ad_tourn.message(AdminRemove.id)
async def remove_admin2(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    data = await state.get_data()
    await state.clear()
    async with asession() as session:
        admin = await session.get(AdminsTable, data["id"])
        clubs = eval(admin.clubs) if eval(admin.clubs) is not None else []
        try:
            clubs.remove(data["club"])
        except:
            await message.answer("‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π id")
            return
        admin.clubs = str(clubs)
        await session.commit()
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öô–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list"+data["club"])],
        [InlineKeyboardButton(text="üìå–ú–µ–Ω—é", callback_data="menu")]
    ])
    await message.answer("üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=markup)

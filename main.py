from defs_meros import *
import os
from config import settings
import telebot
from telebot import types
import sqlite3
from json import loads
import datetime

admins = ['7917683744', '737942168', '6070976396', '1396645155', '871296258', '1984219536', '1105133767']
technoadmins = ['469495683']  # –õ–∂–µ–¥–º–∏—Ç—Ä–∏–π
darkturnadmins = ['890876763', '831232089']  # –§–∏–∞–ª–∫–∞, –í–µ–ª–æ—Å–∏–ø–µ–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å
letiadmins = ['985038251']  # –†—É–∏–Ω–∞
bonchadmins = []
polytechadmins = []
miningadmins = ['5904573214']  # –ü–∏–Ω–≥–≤–∏–Ω–∏
eveningadmins = ['625677497']  # –°—Ç—Ä–æ–Ω–≥
blackinsideadmins = ['672758760']  # Rearm

bot = telebot.TeleBot(settings['TOKEN'])
current_club = ''


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    base = sqlite3.connect('users')
    cur = base.cursor()
    cur.execute('SELECT id FROM users')
    users = cur.fetchall()
    cur.close()
    base.close()

    for i in users:
        if str(i[0]) == str(message.chat.id): # –ó–∞—Ä–µ–≥–∞–Ω –ª–∏ —é–∑–µ—Ä? –î–∞ -> –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –∏ —Å–∫–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            markup.add(types.InlineKeyboardButton('üìå–ú–µ–Ω—é', callback_data='menu'))
            markup.add(types.InlineKeyboardButton('üë®‚Äçüè´–ì–∞–π–¥ –ø–æ –±–æ—Ç—É', callback_data='help'))
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!üëã\n", reply_markup=markup)
            break
    else:
        markup.add(types.InlineKeyboardButton('‚úè–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data='start_reg'))
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!üëã\n", reply_markup=markup)


def start_reg(message):
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('‚úè–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', web_app=types.WebAppInfo(
        url='https://acc-maf.github.io/StudLeagueBot/start_reg.html')))
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=markup)


def end_reg(message, data):
    if data["nick"][0] == '/':
        bot.send_message(message.chat.id,
                         "–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ /, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ", reply_markup=types.ReplyKeyboardRemove())
        start_reg(message)
        return
    base = sqlite3.connect('users')
    cur = base.cursor()
    cur.execute(f'DELETE FROM users WHERE id = {message.chat.id}')  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    base.commit()
    cur.execute(f'INSERT INTO users (id, nick, club) VALUES ("{message.chat.id}", "{data["nick"]}", "{data["club"]}")')
    base.commit()
    cur.close()
    base.close()
    bot.send_message(message.chat.id, "üéâ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–æ–Ω—Å–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", message_effect_id='5046509860389126442', reply_markup=types.ReplyKeyboardRemove())
    profileshow(message)


@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton('üéÆ–ò–≥—Ä—ã –≤ –∫–ª—É–±–∞—Ö', callback_data='clubs_list')
    btn2 = types.InlineKeyboardButton('üèÜ–¢—É—Ä–Ω–∏—Ä—ã', callback_data='tournaments_list')
    btn3 = types.InlineKeyboardButton('üîë–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile_show')
    btn4 = types.InlineKeyboardButton('üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule')
    btn5 = types.InlineKeyboardButton('üë®‚Äçüè´–ì–∞–π–¥ –ø–æ –±–æ—Ç—É', callback_data='help')
    btn6 = types.InlineKeyboardButton('üìñ–ü—Ä–∞–≤–∏–ª–∞', url='https://t.me/mafiarulesteach_bot')
    btn7 = types.InlineKeyboardButton('üóØ–ì—Ä—É–ø–ø–∞ –≤ VK', url='https://vk.com/studmafiaspb')
    btn8 = types.InlineKeyboardButton('üõ†–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/acc_maf')
    btn9 = types.InlineKeyboardButton('üí∏–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º', callback_data='donut')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9)
    bot.send_message(message.chat.id, "üìå–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callbacks(callback):
    if callback.data == 'menu': # –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
        menu(callback.message)
        return
    if callback.data == 'donut': # –í—ã—Å–ª–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –¥–æ–Ω–∞—Ç–∞
        donut1(callback.message)
        return
    if callback.data == 'schedule': # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule(callback.message)
        return
    if callback.data == 'profile_show': # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è (–∏–∑ –º–µ–Ω—é)
        profileshow(callback.message)
        return
    if callback.data == 'profile_change': # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
        profilechange1(callback.message)
        return
    if callback.data == 'start_reg': # –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ
        start_reg(callback.message)
        return
    if callback.data == 'tournaments_list':  # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        tournaments_list(callback.message, 0)
        return
    if callback.data == 'ad_tournaments_list':  # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        tournaments_list(callback.message, 1)
        return
    if callback.data == 'clubs_list': # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—É–±–æ–≤
        clubs_list(callback.message)
        return
    if callback.data == 'userslist': # –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –≤ –±–æ—Ç–µ
        userslist(callback.message, 1)
        return
    if callback.data == 'userchange': # –∏–∑–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä–∞ –±–æ—Ç–∞
        datachange1(callback.message)
        return
    if callback.data == 'create_tourn': # —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä
        tournament_create1(callback.message)
        return
    if callback.data == 'spam': # –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
        spam1(callback.message)
        return
    if callback.data == 'help': # –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
        us_help(callback.message)
        return
    if callback.data == 'ad_help': # –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
        ad_help(callback.message)
        return

    base_tourn = sqlite3.connect('tournaments_list')
    cur_tourn = base_tourn.cursor()
    cur_tourn.execute('SELECT identify FROM tournaments')
    data = cur_tourn.fetchall()
    cur_tourn.close()
    base_tourn.close()

    for i in data: # i[0] - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞
        if callback.data == i[0]: # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ—ã –æ —Ç—É—Ä–Ω–∏—Ä–µ
            tournament_info(callback.message, i[0], 0)
            return
        if callback.data == i[0] + 'ad': # –î–ª—è –∞–¥–º–∏–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ—ã –æ —Ç—É—Ä–Ω–∏—Ä–µ
            tournament_info(callback.message, i[0], 1)
            return
        if callback.data == i[0] + 'tourn_reg': # –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
            registering(callback.message, i[0])
            return
        if callback.data == i[0] + 'members': # –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
            mero_members(callback.message, i[0], 1)
            return
        if callback.data == i[0] + 'cancel_reg': # –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
            cancel_reg(callback.message, i[0])
            return
        if callback.data == i[0] + 'edit': # –∏–∑–º–µ–Ω–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
            tournament_edit1(callback.message, i[0])
            return
        if callback.data == i[0] + 'delete': # —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä
            tournament_delete(callback.message, i[0])
            return
        if callback.data == i[0] + 'send': # —Ä–∞—Å—Å—ã–ª–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç—É—Ä–Ω–∏—Ä–∞
            send1(callback.message, i[0])
            return
        if callback.data == i[0] + 'confirm': # –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ
            confirm(callback.message, i[0])
            return
        if callback.data == i[0] + 'profiles': # –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
            profiles_view(callback.message, i[0])
            return
        if callback.data == i[0] + 'requests': # –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
            check_requests(callback.message, i[0])
            return
        if callback.data == i[0] + 'add_photo': # –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–∏ –∑–∞—è–≤–∫–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
            photo_comm_tourn_get(callback.message, i[0])
            return

    clubs = ['DarkTurn', 'LETI', 'Polytech', 'Mining', 'EveningParty', 'TechnoMafia', 'BONCHMAFIA', 'BlackInside']
    for i in clubs:
        base_clubs = sqlite3.connect('clubs')
        cur_clubs = base_clubs.cursor()
        cur_clubs.execute(f'SELECT identify, limits FROM {i}')
        data_ = cur_clubs.fetchall()
        cur_clubs.close()
        base_clubs.close()
        if callback.data == i + 'admin': # –¥–ª—è –∞–¥–º–∏–Ω-–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–ª—É–±–∞
            club_admin(callback.message, i)
            return
        if callback.data == i + 'create': # –¥–ª—è –∞–¥–º–∏–Ω-—Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–ª—É–±–∞
            mero_create1(callback.message, i)
            return
        for j in data_: # j[0] - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if callback.data == i + j[0] + 'reg': # –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∫–ª—É–±–∞
                registering(callback.message, j[0], club=i)
                return
            if callback.data == i + j[0] + 'members': # –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                mero_members(callback.message, j[0], 1, club=i)
                return
            if callback.data == i + j[0] + 'cancel_reg': # –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
                cancel_reg(callback.message, j[0], club=i)
                return
            if callback.data == i + j[0] + 'info': # –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ—ã –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                clubs_evening_info(callback.message, j[0], i, 0)
                return
            if callback.data == i + j[0] + 'admininfo': # –¥–ª—è –∞–¥–º–∏–Ω-–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ—ã –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                clubs_evening_info(callback.message, j[0], i, 1)
                return
            if callback.data == i + j[0] + 'edit': # –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ—ã –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                mero_edit1(callback.message, j[0], i)
                return
            if callback.data == i + j[0] + 'delete': # –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                mero_delete(callback.message, j[0], i)
                return
            if callback.data == i + j[0] + 'send': # –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                send1(callback.message, j[0], i)
                return
            if callback.data == i + j[0] + 'confirm': # –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ
                confirm(callback.message, j[0], i)
                return
            if callback.data == i + j[0] + 'profiles': # –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                profiles_view(callback.message, j[0], i)
                return
            if callback.data == i + j[0] + 'requests': # –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                check_requests(callback.message, j[0], i)
                return

    for i in data:  # i[0] - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        base = sqlite3.connect('tournament')
        cur = base.cursor()
        try:
            cur.execute(f'SELECT id FROM {i[0]}')
        except:
            continue
        members = cur.fetchall()
        cur.close()
        base.close()
        for k in members:  # k[0] - –∞–π–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥–∞–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É –Ω–∞ –º–µ—Ä–æ
            if callback.data == k[0] + i[0] + 'accept':
                accept_request(callback.message, i[0], k[0])
                return
            if callback.data == k[0] + i[0] + 'decline':
                decline_request(callback.message, i[0], k[0])
                return

    for i in clubs:
        base_clubs = sqlite3.connect('clubs')
        cur_clubs = base_clubs.cursor()
        cur_clubs.execute(f'SELECT identify FROM {i}')
        data_ = cur_clubs.fetchall()
        cur_clubs.close()
        base_clubs.close()
        for j in data_:  # j[0] - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            base = sqlite3.connect('mero')
            cur = base.cursor()
            try:
                cur.execute(f'SELECT id FROM {i + j[0]}')
            except:
                continue
            members = cur.fetchall()
            cur.close()
            base.close()
            for k in members: # k[0] - –∞–π–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥–∞–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É –Ω–∞ –º–µ—Ä–æ
                if callback.data == k[0] + i + j[0] + 'accept':
                    accept_request(callback.message, j[0], k[0], i)
                    return
                if callback.data == k[0] + i + j[0] + 'decline':
                    decline_request(callback.message, j[0], k[0], i)
                    return


@bot.message_handler(content_types=['web_app_data'])
def web_app(message):
    data = loads(message.web_app_data.data)
    if message.web_app_data.button_text == 'üìù–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        teamreg2(message, data)
        return
    if message.web_app_data.button_text == '‚úè–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
        end_reg(message, data)
        return

    if "identify" in data:
        dicti = "abcdefghijklmnopqrstuvwxyz0123456789_-"
        if not all(char in dicti for char in data["identify"].lower()):
            bot.send_message(message.chat.id,
                             "‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -",
                             reply_markup=types.ReplyKeyboardRemove())
            return

    if message.web_app_data.button_text == 'üé¥–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä':
        tournament_create2(message, data)
        return
    if message.web_app_data.button_text == 'üé¥–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
        mero_create2(message, data)
        return
    else:
        bot.send_message(message.chat.id, '‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É (–ù–ï –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É)')


def clubs_list(message):
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('TechnoMafia')
    btn2 = types.KeyboardButton('–ß—ë—Ä–Ω—ã–π —Ö–æ–¥')
    btn3 = types.KeyboardButton('LETI-MAFIA')
    #btn4 = types.KeyboardButton('BONCHMAFIA')
    #btn5 = types.KeyboardButton('Polytech mafia community')
    btn6 = types.KeyboardButton('Mining Mafia')
    btn7 = types.KeyboardButton('–í–µ—á–µ—Ä–Ω—è—è –ø–∞—Ä—Ç–∏—è')
    btn8 = types.KeyboardButton('Black Inside')
    markup.row(btn1, btn2, btn3)
    markup.row(btn6, btn7, btn8)
    bot.send_message(message.chat.id, "üïπ–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±: ", reply_markup=markup)
    bot.register_next_step_handler(message, club_evening)


def club_evening(message):
    bot.send_message(message.chat.id, '.', reply_markup=types.ReplyKeyboardRemove())  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∏—Ç–æ–∫
    try:
        bot.delete_message(message.chat.id, message.message_id+1)
    except Exception as e:
        print(e)
    if message.text == '–ß—ë—Ä–Ω—ã–π —Ö–æ–¥':
        club = 'DarkTurn'
    elif message.text == 'LETI-MAFIA':
        club = 'LETI'
    elif message.text == 'Polytech mafia community':
        club = 'Polytech'
    elif message.text == 'Mining Mafia':
        club = 'Mining'
    elif message.text == '–í–µ—á–µ—Ä–Ω—è—è –ø–∞—Ä—Ç–∏—è':
        club = 'EveningParty'
    elif message.text == 'TechnoMafia':
        club = 'TechnoMafia'
    elif message.text == 'BONCHMAFIA':
        club = 'BONCHMAFIA'
    elif message.text == 'Black Inside':
        club = 'BlackInside'
    else:
        bot.send_message(message.chat.id, '‚ùå–ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        menu(message)
        return

    base = sqlite3.connect('clubs')
    cur = base.cursor()

    cur.execute(f'SELECT * FROM {club}')
    data = cur.fetchall()

    cur.close()
    base.close()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìå–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu'))
    for i in data:
        if int(i[6]) != 0: # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å = 1, —Ç–æ –µ—Å—Ç—å –µ–≥–æ –º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏
            markup.add(types.InlineKeyboardButton(i[2], callback_data=club + i[1] + 'info'))
    bot.send_message(message.chat.id, 'üé´–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ', reply_markup=markup)


def clubs_evening_info(message, identify, club, typ):  # typ = 1 - –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–æ–º, = 0 - –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    base_mero = sqlite3.connect('mero')
    cur_mero = base_mero.cursor()

    try:
        cur_mero.execute(f'SELECT * FROM {club+identify}')
        players = cur_mero.fetchall()
    except:
        players = []

    cur_mero.close()
    base_mero.close()

    base = sqlite3.connect('clubs')
    cur = base.cursor()
    cur.execute(f'SELECT * FROM {club} WHERE identify = ?', (identify,))
    data = cur.fetchall()
    cur.close()
    base.close()

    for i in data:
        status = i[6]

    cnt = 0  # —Å—á—ë—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    if players:
        if status == 2:
            for i in players:
                if i[6] == 1:
                    cnt += 1
        else:
            for i in players:
                cnt += 1

    markup = types.InlineKeyboardMarkup()
    for i in data:
        output = info(i[2], i[3], i[4], i[5], i[6], members=cnt, cost=i[7])
        if typ:
            if i[6] == 2:
                markup.add(types.InlineKeyboardButton('üìú–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏', callback_data=club + i[1] + 'requests'))
            markup.add(types.InlineKeyboardButton('üìù–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=club + i[1] + 'edit'))
            markup.add(types.InlineKeyboardButton('üëÄ–£–¥–∞–ª–∏—Ç—å', callback_data=club + i[1] + 'delete'))
            markup.add(types.InlineKeyboardButton('üíå–†–∞—Å—Å—ã–ª–∫–∞', callback_data=club + i[1] + 'send'))
            markup.add(types.InlineKeyboardButton('üñº–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏', callback_data=club + i[1] + 'profiles'))
            markup.add(types.InlineKeyboardButton('üôç‚Äç‚ôÇÔ∏è–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data=club + i[1] + 'members'))
        else:
            markup.add(types.InlineKeyboardButton('üìå–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu'))
            if i[6] == 1:
                markup.add(types.InlineKeyboardButton('üìù–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data=club + i[1] + 'reg'))
            else:
                markup.add(types.InlineKeyboardButton('üìù–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=club + i[1] + 'reg'))
            markup.add(types.InlineKeyboardButton('üôç‚Äç‚ôÇÔ∏è–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data=club + i[1] + 'members'))
        try:
            save_path = f'photos\\{club}\\{identify}.png'
            with open(save_path, 'rb') as file:
                bot.send_photo(message.chat.id, file, caption=output, reply_markup=markup)  # –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ —Å —Ñ–æ—Ç–æ
        except:
            bot.send_message(message.chat.id, output, reply_markup=markup)  # –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ
        break


def profileshow(message):
    base = sqlite3.connect('users')
    cur = base.cursor()

    cur.execute('SELECT * FROM users')
    data = cur.fetchall()

    cur.close()
    base.close()

    for i in data:
        if i[1] == str(message.chat.id):
            save_path = f'pp\\{message.chat.id}.png'
            try:
                with open(save_path, 'rb') as file:
                    bot.send_photo(i[1], file)
            except:
                pass
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('üìå–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu'))
            markup.add(types.InlineKeyboardButton('üìù–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile_change'))
            bot.send_message(message.chat.id, 'üôç‚Äç‚ôÇÔ∏è–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ù–∏–∫: ' + i[2] + '\n–ö–ª—É–±: ' + i[3], reply_markup=markup)
            break
    else:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton('üìù–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ', callback_data='start_reg'))
        bot.send_message(message.chat.id, f"‚ùå–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!", reply_markup=markup)


def profilechange1(message):
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('üìù–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', web_app=types.WebAppInfo(
        url='https://acc-maf.github.io/StudLeagueBot/profile_edit.html')))
    markup.add(types.KeyboardButton('üñº–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–∫—É'))
    bot.send_message(message.chat.id, 'üóú–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:', reply_markup=markup)
    bot.register_next_step_handler(message, profilechange2)


def profilechange2(message):
    if message.text == 'üñº–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–∫—É':
        bot.send_message(message.chat.id, "üì∑–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        bot.register_next_step_handler(message, profilechange3)
        return
    if message.text:
        bot.send_message(message.chat.id, "‚ùå–ù–µ –ø–æ–Ω", reply_markup=types.ReplyKeyboardRemove())
        return
    data = loads(message.web_app_data.data)
    base = sqlite3.connect('users')
    cur = base.cursor()
    if "nick" in data:
        cur.execute('UPDATE users SET nick = ? WHERE id = ?', (data["nick"], message.chat.id))
    if "club" in data:
        cur.execute('UPDATE users SET club = ? WHERE id = ?', (data["club"], message.chat.id))
    base.commit()
    cur.close()
    base.close()

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
    menu(message)


def profilechange3(message):
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "‚ùå–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ!")
        menu(message)
        return
    image = bot.download_file(bot.get_file(message.photo[-1].file_id).file_path)
    save_path = f'pp\\{message.chat.id}.png'
    with open(save_path, 'wb+') as file:
        file.write(image)

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
    menu(message)


def photo_comm_tourn_get(message, identify):
    save_path = f"photos\\{identify}\\{message.chat.id}.png"
    try:
        with open(save_path, 'rb') as file:
            bot.send_photo(message.chat.id, file)
    except:
        pass
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    bot.send_message(message.chat.id, "üì∑–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã", reply_markup=markup)
    bot.register_next_step_handler(message, photo_comm_tourn, identify)


def photo_comm_tourn(message, identify):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        return
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "‚ùå–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ!")
        mero_members(message, identify, 0, club=None)
        return
    image = bot.download_file(bot.get_file(message.photo[-1].file_id).file_path)
    if not os.path.isdir(f"photos\\{identify}"):
        os.mkdir(f"photos\\{identify}")
    save_path = f"photos\\{identify}\\{message.chat.id}.png"
    with open(save_path, 'wb+') as file:
        file.write(image)

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
    tournament_info(message, identify, 0)


@bot.pre_checkout_query_handler(func=lambda callback: True)
def pre_checkout_query(pre_check):
    bot.answer_pre_checkout_query(pre_check.id, True)


@bot.message_handler(content_types=['successful_payment'])
def success(message):
    payload = message.successful_payment.invoice_payload
    if payload == 'donut':
        bot.send_message(message.chat.id, "‚ù§–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç—É–¥–ª–∏–≥–∏!!!", message_effect_id='5044134455711629726')
        bot.send_message(-4691783391, f"{message.from_user.first_name} {message.from_user.last_name} –ø–æ–¥–¥–µ—Ä–∂–∞–ª –Ω–∞—Å –Ω–∞ {int(message.successful_payment.total_amount/100)} —Ä—É–±–ª–µ–π!!")
        return
    base_tourn = sqlite3.connect('tournaments_list')
    cur_tourn = base_tourn.cursor()

    base_clubs = sqlite3.connect('clubs')
    cur_clubs = base_clubs.cursor()

    cur_tourn.execute('SELECT identify FROM tournaments')
    data = cur_tourn.fetchall()


    for i in data:  # i[0] - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞
        if payload == i[0]:
            base_mero = sqlite3.connect('tournament')
            cur_mero = base_mero.cursor()
            cur_mero.execute(f'UPDATE {i[0]} SET paid = ? WHERE id = ?', (1, message.chat.id))
            base_mero.commit()
            cur_clubs.close()
            base_clubs.close()
            cur_tourn.close()
            base_tourn.close()
            cur_mero.close()
            base_mero.close()
            bot.send_message(message.chat.id, "üí∏–í–∑–Ω–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω", message_effect_id='5104841245755180586')
            return

    clubs = ['DarkTurn', 'LETI', 'Polytech', 'Mining', 'EveningParty', 'TechnoMafia', 'BONCHMAFIA', 'BlackInside']
    for i in clubs:
        cur_clubs.execute(f'SELECT identify FROM {i}')
        data = cur_clubs.fetchall()
        for j in data:  # j[0] - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if payload == i + j[0]:
                base_mero = sqlite3.connect('mero')
                cur_mero = base_mero.cursor()
                cur_mero.execute(f'UPDATE {i + j[0]} SET paid = ? WHERE id = ?', (1, message.chat.id))
                base_mero.commit()
                cur_clubs.close()
                base_clubs.close()
                cur_tourn.close()
                base_tourn.close()
                cur_mero.close()
                base_mero.close()
                bot.send_message(message.chat.id, "üí∏–í–∑–Ω–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω", message_effect_id='5104841245755180586')
                return


@bot.message_handler(commands=['admin'])
def admin(message):
    global admins, letiadmins, bonchadmins, miningadmins, technoadmins, darkturnadmins, eveningadmins, polytechadmins, blackinsideadmins
    markup = types.InlineKeyboardMarkup(row_width=4)
    for i in admins:
        if str(message.chat.id) == i:
            markup.add(types.InlineKeyboardButton('üèÜ–¢—É—Ä–Ω–∏—Ä', callback_data='ad_tournaments_list'))
            markup.add(types.InlineKeyboardButton('üôç‚Äç‚ôÇÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞', callback_data='userslist'))
            markup.add(types.InlineKeyboardButton('üíå–†–∞—Å—Å—ã–ª–∫–∞', callback_data='spam'))
            markup.add(types.InlineKeyboardButton('TechnoMafia', callback_data='TechnoMafia' + 'admin'))
            markup.add(types.InlineKeyboardButton('–ß—ë—Ä–Ω—ã–π —Ö–æ–¥', callback_data='DarkTurn' + 'admin'))
            markup.add(types.InlineKeyboardButton('LETI-MAFIA', callback_data='LETI' + 'admin'))
            markup.add(types.InlineKeyboardButton('BONCHMAFIA', callback_data='BONCHMAFIA' + 'admin'))
            markup.add(types.InlineKeyboardButton('Polytech mafia community', callback_data='Polytech' + 'admin'))
            markup.add(types.InlineKeyboardButton('Mining Mafia', callback_data='Mining' + 'admin'))
            markup.add(types.InlineKeyboardButton('–í–µ—á–µ—Ä–Ω—è—è –ø–∞—Ä—Ç–∏—è', callback_data='EveningParty' + 'admin'))
            markup.add(types.InlineKeyboardButton('Black Inside', callback_data='BlackInside' + 'admin'))
            break
    else:
        for i in technoadmins:
            if str(message.chat.id) == i:
                markup.add(types.InlineKeyboardButton('TechnoMafia', callback_data='TechnoMafia' + 'admin'))
                break
        else:
            for i in darkturnadmins:
                if str(message.chat.id) == i:
                    markup.add(types.InlineKeyboardButton('–ß—ë—Ä–Ω—ã–π —Ö–æ–¥', callback_data='DarkTurn' + 'admin'))
                    break
            else:
                for i in letiadmins:
                    if str(message.chat.id) == i:
                        markup.add(types.InlineKeyboardButton('LETI-MAFIA', callback_data='LETI' + 'admin'))
                        break
                else:
                    for i in bonchadmins:
                        if str(message.chat.id) == i:
                            markup.add(types.InlineKeyboardButton('BONCHMAFIA', callback_data='BONCHMAFIA' + 'admin'))
                            break
                    else:
                        for i in polytechadmins:
                            if str(message.chat.id) == i:
                                markup.add(types.InlineKeyboardButton('Polytech mafia community', callback_data='Polytech' + 'admin'))
                                break
                        else:
                            for i in miningadmins:
                                if str(message.chat.id) == i:
                                    markup.add(types.InlineKeyboardButton('Mining Mafia', callback_data='Mining' + 'admin'))
                                    break
                            else:
                                for i in eveningadmins:
                                    if str(message.chat.id) == i:
                                        markup.add(types.InlineKeyboardButton('–í–µ—á–µ—Ä–Ω—è—è –ø–∞—Ä—Ç–∏—è', callback_data='EveningParty' + 'admin'))
                                        break
                                else:
                                    for i in blackinsideadmins:
                                        if str(message.chat.id) == i:
                                            markup.add(types.InlineKeyboardButton('Black Inside', callback_data='BlackInside' + 'admin'))
                                            break
                                    else:
                                        bot.send_message(message.chat.id, f"‚ùå–¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
                                        return

    markup.add(types.InlineKeyboardButton('üîì–ê–¥–º–∏–Ω-–≥–∞–π–¥ –ø–æ –±–æ—Ç—É', callback_data='ad_help'))
    bot.send_message(message.chat.id, 'üîê–í—ã –∞–¥–º–∏–Ω:', reply_markup=markup)


def club_admin(message, club):
    base = sqlite3.connect('clubs')
    cur = base.cursor()

    cur.execute(f'SELECT name, identify FROM {club}')
    data = cur.fetchall()

    cur.close()
    base.close()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üé¥–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data=club + 'create'))
    for i in data:
        markup.add(types.InlineKeyboardButton(i[0], callback_data=club + i[1] + 'admininfo'))
    bot.send_message(message.chat.id, 'üéü–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ', reply_markup=markup)


def userslist(message, typ):
    base = sqlite3.connect('users')
    cur = base.cursor()

    cur.execute('SELECT * FROM users')
    players = cur.fetchall()

    players_output = ''
    for i in players:
        players_output += f'‚Ññ{i[0]}. {i[1]} - @{bot.get_chat(i[1]).username} - {i[2]} - {i[3]}\n'

    markup = types.InlineKeyboardMarkup()
    if typ:
        markup.add(types.InlineKeyboardButton('üìù–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='userchange'))

    bot.send_message(message.chat.id, players_output, reply_markup=markup)

    cur.close()
    base.close()


def datachange1(message):
    bot.send_message(message.chat.id, f"üìë–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
    bot.register_next_step_handler(message, datachange2)


def datachange2(message):
    base = sqlite3.connect('users')
    cur = base.cursor()

    cur.execute('SELECT * FROM users')
    players = cur.fetchall()

    cur.close()
    base.close()

    until = 0
    try:
        until = int(message.text)
    except:
        bot.send_message(message.chat.id, "‚ùå–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        bot.register_next_step_handler(message, datachange1)

    cnt = 0
    for i in players:
        cnt += 1
        if cnt == until:
            markup = types.ReplyKeyboardMarkup()
            markup.add(types.KeyboardButton('‚úí–ù–∏–∫'), types.KeyboardButton('üé©–ö–ª—É–±'))
            bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
            bot.register_next_step_handler(message, datachange3, i)
            break
    else:
        bot.send_message(message.chat.id, "‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        return


def datachange3(message, i):
    if message.text == '‚úí–ù–∏–∫':
        bot.send_message(message.chat.id, "üñã–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, datachange4, i)
    elif message.text == 'üé©–ö–ª—É–±':
        markup = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton('TechnoMafia')
        btn2 = types.KeyboardButton('–ß—ë—Ä–Ω—ã–π —Ö–æ–¥')
        btn3 = types.KeyboardButton('LETI-MAFIA')
        btn4 = types.KeyboardButton('BONCHMAFIA')
        btn5 = types.KeyboardButton('Polytech mafia community')
        btn6 = types.KeyboardButton('Mining Mafia')
        btn7 = types.KeyboardButton('–í–µ—á–µ—Ä–Ω—è—è –ø–∞—Ä—Ç–∏—è')
        btn8 = types.KeyboardButton('Polemica SPb')
        btn9 = types.KeyboardButton('–ò–ª–ª—éz–∏—è –û–±–º–∞N–∞')
        btn10 = types.KeyboardButton('TITAN SPb')
        markup.row(btn1, btn2, btn3, btn4)
        markup.row(btn5, btn6, btn7)
        markup.row(btn8, btn9, btn10)
        bot.send_message(message.chat.id, "üéì–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—É–±", reply_markup=markup)
        bot.register_next_step_handler(message, datachange5, i)
    else:
        bot.send_message(message.chat.id, '.', reply_markup=types.ReplyKeyboardRemove())  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∏—Ç–æ–∫
        bot.delete_message(message.chat.id, message.message_id + 1)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üìå–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu'))
        bot.send_message(message.chat.id, "‚ùå–ù–µ –ø–æ–Ω—è–ª, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!", reply_markup=markup)


def datachange4(message, i):
    base = sqlite3.connect('users')
    cur = base.cursor()

    cur.execute('UPDATE users SET nick = ? WHERE num = ?', (message.text, i[0]))
    base.commit()
    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
    cur.close()
    base.close()

    userslist(message, 1)


def datachange5(message, i):
    base = sqlite3.connect('users')
    cur = base.cursor()

    cur.execute('UPDATE users SET club = ? WHERE num = ?', (message.text, i[0]))
    base.commit()
    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
    cur.close()
    base.close()

    userslist(message, 1)


def profiles_view(message, identify, club=None):
    if club:
        base = sqlite3.connect('mero')
        cur = base.cursor()
        try:
            cur.execute(f'SELECT * FROM {club + identify}')
        except:
            bot.send_message(message.chat.id, "‚ùå–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç!")
            cur.close()
            base.close()
            return
        typ = 'solo'
    else:
        base = sqlite3.connect('tournament')
        cur = base.cursor()
        try:
            cur.execute(f'SELECT * FROM {identify}')
        except:
            bot.send_message(message.chat.id, "‚ùå–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç!")
            cur.close()
            base.close()
            return
        base_tourn = sqlite3.connect('tournaments_list')
        cur_tourn = base_tourn.cursor()
        cur_tourn.execute(f'SELECT type FROM tournaments WHERE identify = ?', (identify,))
        type_base = cur_tourn.fetchall()
        cur_tourn.close()
        base_tourn.close()
        typ = ''
        for i in type_base:
            typ = i[0]
            break

    players = cur.fetchall()
    cur.close()
    base.close()

    if typ != 'team':
        for i in players:
            try:
                save_path = f'pp\\{i[1]}.png'  # f'pp/{i[1]}.png'
                with open(save_path, 'rb') as file:
                    bot.send_photo(message.chat.id, file)
            except:
                pass
            bot.send_message(message.chat.id, '–ù–∏–∫: ' + i[2] + '\n–ö–ª—É–±: ' + i[3])
    else:
        for i in players:
            try:
                save_path = f'photos\\{identify}\\{i[1]}.png'  # f'pp/{identify}/{i[1]}.png'
                with open(save_path, 'rb') as file:
                    bot.send_photo(message.chat.id, file, caption='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ' + i[2] + '\n–°–æ—Å—Ç–∞–≤: ' + i[3])
            except:
                bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ' + i[2] + '\n–°–æ—Å—Ç–∞–≤: ' + i[3])


def tournament_create1(message):
    base = sqlite3.connect('tournaments_list')
    cur = base.cursor()
    cur.execute('SELECT identify FROM tournaments')
    data = cur.fetchall()
    cur.close()
    base.close()

    cnt = 0
    output = ''
    bot.send_message(message.chat.id, '‚Äº–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, -_, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–∞–∑–≤–∞–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞.\n–ü—Ä–∏–º–µ—Ä—ã: my_first_tourn1, StudLeague3\n\n–ó–∞–Ω—è—Ç—ã–µ –∏–Ω–¥–µ—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä—ã:.')
    for i in data:
        cnt += 1
        output += str(cnt) + '. ' + i[0] + '\n'
    if output != '':
        bot.send_message(message.chat.id, output)
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('üé¥–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', web_app=types.WebAppInfo(
        url='https://acc-maf.github.io/StudLeagueBot/tournament_create.html')))
    bot.send_message(message.chat.id, 'üóú–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', reply_markup=markup)


def tournament_create2(message, data):
    base = sqlite3.connect('tournaments_list')
    cur = base.cursor()

    cur.execute('SELECT identify FROM tournaments')
    ids = cur.fetchall()
    for i in ids:
        if data["identify"] == i[0]:
            bot.send_message(message.chat.id, '‚ùå–¢–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∑–∞–Ω—è—Ç!', reply_markup=types.ReplyKeyboardRemove())
            cur.close()
            base.close()
            return

    try:
        cur.execute(
            f'INSERT INTO tournaments (identify, name, desc, date, rules, score, type, limits, status, cost, distance) VALUES ("{data["identify"]}", "{data["name"]}", "{data["desc"]}", "{data["date"]}", "{data["rules"]}", "{data["score"]}", "{data["typ"]}", "{int(data["limit"])}", 0, "{int(data["cost"])}", "{data["distance"]}")')
    except:
        cur.close()
        base.close()
        bot.send_message(message.chat.id, "‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ)", reply_markup=types.ReplyKeyboardRemove())
        return
    base.commit()
    cur.close()
    base.close()

    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton("‚ùå–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω—ã–π —É—Å–ø–µ—Ö\n\nüì∑–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                     reply_markup=markup)
    bot.register_next_step_handler(message, tournament_create3, data["identify"])


def tournament_create3(message, identify):
    if message.text == '‚ùå–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        tournament_info(message, identify, 1)
        return
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "‚ùå–ù–µ –ø–æ–Ω", reply_markup=types.ReplyKeyboardRemove())
        tournament_info(message, identify, 1)
        return
    image = bot.download_file(bot.get_file(message.photo[-1].file_id).file_path)
    save_path = f"photos\\announcements\\{identify}.png"
    with open(save_path, 'wb+') as file:
        file.write(image)

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(),
                     message_effect_id='5107584321108051014')
    tournament_info(message, identify, 1)


def mero_create1(message, club):
    global current_club
    current_club = club
    base = sqlite3.connect('clubs')
    cur = base.cursor()
    cur.execute(f'SELECT identify FROM {club}')
    data = cur.fetchall()
    cur.close()
    base.close()
    cnt = 0
    output = ''
    bot.send_message(message.chat.id, '‚Äº–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, -_, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–∞–∑–≤–∞–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞.\n–ü—Ä–∏–º–µ—Ä—ã: techno_evening1, bonchevening8\n\n–ó–∞–Ω—è—Ç—ã–µ –∏–Ω–¥–µ—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä—ã:.')
    for i in data:
        cnt += 1
        output += str(cnt) + '. ' + i[0] + '\n'
    if output != '':
        bot.send_message(message.chat.id, output)
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('üé¥–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', web_app=types.WebAppInfo(
        url='https://acc-maf.github.io/StudLeagueBot/mero_create.html')))
    bot.send_message(message.chat.id, 'üóú–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=markup)


def mero_create2(message, data):
    global current_club
    base = sqlite3.connect('clubs')
    cur = base.cursor()

    try:
        cur.execute(f'SELECT identify FROM {current_club}')
    except:
        cur.close()
        base.close()
        bot.send_message(message.chat.id, "‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=types.ReplyKeyboardRemove())
        admin(message)
        return

    ids = cur.fetchall()
    for i in ids:
        if data["identify"] == i[0]:
            bot.send_message(message.chat.id, '‚ùå–¢–∞–∫–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∑–∞–Ω—è—Ç!',
                             reply_markup=types.ReplyKeyboardRemove())
            cur.close()
            base.close()
            return

    if data['proh']:
        desc = data['desc'] + '\n\n' + data["proh"]
    else:
        desc = data['desc']
    data['date'] = datetime.datetime.strptime(data['date'].split('T')[0], "%Y-%m-%d").strftime("%d/%m/%Y") + ' ' + data['date'].split('T')[1]
    cur.execute(
        f'INSERT INTO {current_club} (identify, name, desc, date, limits, status, cost) VALUES ("{data["identify"]}", "{data["name"]}", "{desc}", "{data["date"]}", "{int(data["limit"])}", 0, "{int(data["cost"])}")')
    base.commit()
    cur.close()
    base.close()

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω—ã–π —É—Å–ø–µ—Ö", message_effect_id='5107584321108051014',
                     reply_markup=types.ReplyKeyboardRemove())
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton("‚ùå–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    bot.send_message(message.chat.id,
                     "üéâ–£—Å–ø–µ—à–Ω—ã–π —É—Å–ø–µ—Ö\n\nüì∑–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=markup)
    bot.register_next_step_handler(message, mero_create3, data["identify"], current_club)


def mero_create3(message, identify, club):
    if message.text == '‚ùå–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        clubs_evening_info(message, identify, club, 1)
        return
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "‚ùå–ù–µ –ø–æ–Ω", reply_markup=types.ReplyKeyboardRemove())
        clubs_evening_info(message, identify, club, 1)
        return
    image = bot.download_file(bot.get_file(message.photo[-1].file_id).file_path)
    save_path = f"photos\\{club}\\{identify}.png"
    with open(save_path, 'wb+') as file:
        file.write(image)

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(),
                     message_effect_id='5107584321108051014')
    clubs_evening_info(message, identify, club, 1)


def tournament_edit1(message, identify):
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('üñç–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä', web_app=types.WebAppInfo(
        url='https://acc-maf.github.io/StudLeagueBot/tournament_edit.html')))
    markup.add(types.KeyboardButton('‚ûï–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'))
    markup.add(types.KeyboardButton('‚ûñ–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'))
    markup.add(types.KeyboardButton('üñº–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É'))
    bot.send_message(message.chat.id, 'üóú–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=markup)
    bot.register_next_step_handler(message, tournament_edit2, identify)


def tournament_edit2(message, identify):
    if message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        edit3(message, identify)
        return
    if message.text == '‚ûñ–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        edit4(message, identify)
        return
    if message.text == 'üñº–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É':
        edit5(message, identify)
        return
    if message.text:
        bot.send_message(message.chat.id, "‚ùå–ù–µ –ø–æ–Ω", reply_markup=types.ReplyKeyboardRemove())
        return
    data = loads(message.web_app_data.data)
    base = sqlite3.connect('tournaments_list')
    cur = base.cursor()
    if "name" in data:
        cur.execute('UPDATE tournaments SET name = ? WHERE identify = ?', (data["name"], identify))
    if "desc" in data:
        cur.execute('UPDATE tournaments SET desc = ? WHERE identify = ?', (data["desc"], identify))
    if "distance" in data:
        cur.execute('UPDATE tournaments SET distance = ? WHERE identify = ?', (data["distance"], identify))
    if "date" in data:
        cur.execute('UPDATE tournaments SET date = ? WHERE identify = ?', (data["date"], identify))
    if "rules" in data:
        cur.execute('UPDATE tournaments SET rules = ? WHERE identify = ?', (data["rules"], identify))
    if "score" in data:
        cur.execute('UPDATE tournaments SET score = ? WHERE identify = ?', (data["score"], identify))
    if "limit" in data:
        cur.execute('UPDATE tournaments SET limits = ? WHERE identify = ?', (data["limit"], identify))
    if "cost" in data:
        cur.execute('UPDATE tournaments SET cost = ? WHERE identify = ?', (data["cost"], identify))
    if "status" in data:
        cur.execute('UPDATE tournaments SET status = ? WHERE identify = ?', (data["status"], identify))
    base.commit()
    cur.close()
    base.close()

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')


def mero_edit1(message, identify, club):
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('üñç–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', web_app=types.WebAppInfo(
        url='https://acc-maf.github.io/StudLeagueBot/mero_edit.html')))
    markup.add(types.KeyboardButton('‚ûï–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'))
    markup.add(types.KeyboardButton('‚ûñ–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'))
    markup.add(types.KeyboardButton('üñº–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É'))
    bot.send_message(message.chat.id, 'üóú–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=markup)
    bot.register_next_step_handler(message, mero_edit2, identify, club)


def mero_edit2(message, identify, club):
    if message.text == '‚ûï–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        edit3(message, identify, club)
        return
    if message.text == '‚ûñ–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        edit4(message, identify, club)
        return
    if message.text == 'üñº–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É':
        edit5(message, identify, club)
        return
    if message.text:
        bot.send_message(message.chat.id, "‚ùå–ù–µ –ø–æ–Ω", reply_markup=types.ReplyKeyboardRemove())
        return
    data = loads(message.web_app_data.data)
    base = sqlite3.connect('clubs')
    cur = base.cursor()
    if "name" in data:
        cur.execute(f'UPDATE {club} SET name = ? WHERE identify = ?', (data["name"], identify))
    if "desc" in data:
        cur.execute(f'UPDATE {club} SET desc = ? WHERE identify = ?', (data["desc"], identify))
    if "date" in data:
        data['date'] = datetime.datetime.strptime(data['date'].split('T')[0], "%Y-%m-%d").strftime("%d/%m/%Y") + ' ' + data['date'].split('T')[1]
        cur.execute(f'UPDATE {club} SET date = ? WHERE identify = ?', (data["date"], identify))
    if "limit" in data:
        cur.execute(f'UPDATE {club} SET limits = ? WHERE identify = ?', (data["limit"], identify))
    if "cost" in data:
        cur.execute(f'UPDATE {club} SET cost = ? WHERE identify = ?', (data["cost"], identify))
    if "status" in data:
        cur.execute(f'UPDATE {club} SET status = ? WHERE identify = ?', (data["status"], identify))

    base.commit()
    cur.close()
    base.close()

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
    clubs_evening_info(message, identify, club, 1)


def edit3(message, identify, club=None):
    base = sqlite3.connect('tournaments_list')
    cur = base.cursor()
    cur.execute(f'SELECT type FROM tournaments WHERE identify = ?', (identify,))
    typ_base = cur.fetchall()
    cur.close()
    base.close()
    typ = ''
    for i in typ_base:
        typ = i[0]
    if typ == 'solo':
        mero_members(message, identify, 0, club=club)
        bot.send_message(message.chat.id, "^^^ –£—á–∞—Å—Ç–Ω–∏–∫–∏ ^^^", reply_markup=types.ReplyKeyboardRemove())

        userslist(message, 0)
        markup = types.ReplyKeyboardMarkup()
        markup.add(types.KeyboardButton('–î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫'))
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ ^^^ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup()
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        mero_members(message, identify, 0, club=club)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", reply_markup=markup)

    bot.register_next_step_handler(message, edit3_1, identify, typ, club)


def edit3_(message, identify, typ, club=None):
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('–î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫'))
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
    bot.register_next_step_handler(message, edit3_1, identify, typ, club)


def edit3_1(message, identify, typ, club=None):
    if message.text.strip() == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        if club:
            clubs_evening_info(message, identify, club, 1)
        else:
            tournament_info(message, identify, 1)
        return

    if typ != 'team':
        try:
            int(message.text.strip())
        except:
            if message.text.strip() == '–î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫':
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫", reply_markup=types.ReplyKeyboardRemove())
                bot.register_next_step_handler(message, edit3_2, identify, club)
            else:
                bot.send_message(message.chat.id, "‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=types.ReplyKeyboardRemove())
                return
        else:
            base_us = sqlite3.connect('users')
            cur_us = base_us.cursor()
            cur_us.execute('SELECT * FROM users WHERE num = ?', (int(message.text.strip()),))
            users = cur_us.fetchall()
            cur_us.close()
            base_us.close()
            nick = ''
            club_user = ''
            us_id = ''
            for i in users:
                us_id = i[1]
                nick = i[2]
                club_user = i[3]
                break

            if club:
                base_memb = sqlite3.connect('mero')
                cur_memb = base_memb.cursor()
                cur_memb.execute(
                    f'CREATE TABLE IF NOT EXISTS {club + identify} (num INTEGER PRIMARY KEY, id TEXT NOT NULL, nick TEXT NOT NULL, club TEXT NOT NULL, paid INTEGER, confirm INTEGER, request INTEGER)')
                base_memb.commit()
                cur_memb.execute(
                    f'INSERT INTO {club + identify} (id, nick, club) VALUES ("{us_id}", "{nick}", "{club_user}")')
                base_memb.commit()
            else:
                base_memb = sqlite3.connect('tournament')
                cur_memb = base_memb.cursor()
                cur_memb.execute(
                    f'CREATE TABLE IF NOT EXISTS {identify} (num INTEGER PRIMARY KEY, id TEXT NOT NULL, nick TEXT NOT NULL, club TEXT NOT NULL, paid INTEGER, confirm INTEGER, request INTEGER)')
                base_memb.commit()
                cur_memb.execute(
                    f'INSERT INTO {identify} (id, nick, club) VALUES ("{us_id}", "{nick}", "{club_user}")')
                base_memb.commit()
            bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", message_effect_id='5107584321108051014')
            cur_memb.close()
            base_memb.close()

            edit3_(message, identify, club)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, edit3_3, identify, message.text, club)


def edit3_2(message, identify, club=None): # –í message.text —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∏–∫
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—É–± —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    bot.register_next_step_handler(message, edit3_3, identify, message.text, club=club)


def edit3_3(message, identify, nick, club=None):
    if club:
        base_memb = sqlite3.connect('mero')
        cur_memb = base_memb.cursor()
        cur_memb.execute(
            f'CREATE TABLE IF NOT EXISTS {club + identify} (num INTEGER PRIMARY KEY, id TEXT NOT NULL, nick TEXT NOT NULL, club TEXT NOT NULL, paid INTEGER, confirm INTEGER, request INTEGER)')
        base_memb.commit()
        cur_memb.execute(
            f'INSERT INTO {club + identify} (id, nick, club, request) VALUES ("None", "{nick}", "{message.text}", 0)')
    else:
        base_memb = sqlite3.connect('tournament')
        cur_memb = base_memb.cursor()
        cur_memb.execute(f'CREATE TABLE IF NOT EXISTS {identify} (num INTEGER PRIMARY KEY, id TEXT NOT NULL, nick TEXT NOT NULL, club TEXT NOT NULL, paid INTEGER, confirm INTEGER, request INTEGER)')
        base_memb.commit()
        cur_memb.execute(
            f'INSERT INTO {identify} (id, nick, club, request) VALUES ("None", "{nick}", "{message.text}", 0)')
    base_memb.commit()
    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", message_effect_id='5107584321108051014')
    cur_memb.close()
    base_memb.close()

    edit3_(message, identify, club)


def edit4(message, identify, club=None):
    mero_members(message, identify, 0, club=club)
    bot.send_message(message.chat.id, "^^^ –£—á–∞—Å—Ç–Ω–∏–∫–∏ ^^^", reply_markup=types.ReplyKeyboardRemove())

    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)", reply_markup=markup)
    bot.register_next_step_handler(message, edit4_1, identify, club)


def edit4_1(message, identify, club=None):
    if message.text.strip() == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        if club:
            clubs_evening_info(message, identify, club, 1)
        else:
            tournament_info(message, identify, 1)
        return

    try:
        int(message.text.strip())
    except:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        edit4(message, identify, club)
        return
    if club:
        base_memb = sqlite3.connect('mero')
        cur_memb = base_memb.cursor()
        cur_memb.execute(f'DELETE FROM {club + identify} WHERE num = ?', (int(message.text.strip()),))
        base_memb.commit()
    else:
        base_memb = sqlite3.connect('tournament')
        cur_memb = base_memb.cursor()
        cur_memb.execute(f'DELETE FROM {identify} WHERE num = ?', (int(message.text.strip()),))
        base_memb.commit()
    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", message_effect_id='5107584321108051014')
    cur_memb.close()
    base_memb.close()

    edit4(message, identify, club)


def edit5(message, identify, club=None):
    bot.send_message(message.chat.id, "üì∑–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    bot.register_next_step_handler(message, edit5_1,identify, club)


def edit5_1(message, identify, club):
    if message.content_type != 'photo':
        bot.send_message(message.chat.id, "‚ùå–ù–µ –ø–æ–Ω", reply_markup=types.ReplyKeyboardRemove())
        return
    image = bot.download_file(bot.get_file(message.photo[-1].file_id).file_path)
    if club:
        save_path = f"photos\\{club}\\{identify}.png"
    else:
        save_path = f"photos\\announcements\\{identify}.png"
    with open(save_path, 'wb+') as file:
        file.write(image)

    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(),
                     message_effect_id='5107584321108051014')


def tournament_delete(message, identify):
    base_list = sqlite3.connect('tournaments_list')
    cur_list = base_list.cursor()

    base_tour = sqlite3.connect('tournament')
    cur_tour = base_tour.cursor()

    try:
        cur_list.execute('DELETE FROM tournaments WHERE identify = ?', (identify,))
        base_list.commit()
        bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", message_effect_id='5107584321108051014')
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå–û—à–∏–±–∫–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
        print(e)
    try:
        cur_tour.execute(f'DROP TABLE {identify}')
        base_tour.commit()
    except Exception as e:
        print(e)

    cur_list.close()
    base_list.close()
    cur_tour.close()
    base_tour.close()


def mero_delete(message, identify, club):
    base_list = sqlite3.connect('clubs')
    cur_list = base_list.cursor()

    base_mero = sqlite3.connect('mero')
    cur_mero = base_mero.cursor()

    try:
        cur_list.execute(f'DELETE FROM {club} WHERE identify = ?', (identify,))
        base_list.commit()
        bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", message_effect_id='5107584321108051014')
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå–û—à–∏–±–∫–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
        print(e)
    try:
        cur_mero.execute(f'DROP TABLE {club+identify}')
        base_mero.commit()
    except Exception as e:
        print(e)

    cur_list.close()
    base_list.close()

    cur_mero.close()
    base_mero.close()


def spam1(message):
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    bot.send_message(message.chat.id, "üí¨–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º —é–∑–µ—Ä–∞–º –±–æ—Ç–∞", reply_markup=markup)
    bot.register_next_step_handler(message, spam2)


def spam2(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        admin(message)
        return
    bot.send_message(message.chat.id, f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "{message.text}" –í–°–ï–ú —é–∑–µ—Ä–∞–º –±–æ—Ç–∞? –í–≤–µ–¥–∏—Ç–µ –î–ê, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
    bot.register_next_step_handler(message, spam3, message.text)


def spam3(message, text):
    if message.text != '–î–ê':
        bot.send_message(message.chat.id, '‚ùå–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!')
    else:
        base = sqlite3.connect('users')
        cur = base.cursor()

        cur.execute('SELECT * FROM users')
        users = cur.fetchall()

        cur.close()
        base.close()

        for i in users:
            bot.send_message(i[1], text)


def send1(message, identify, club=None):
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    markup.add(types.KeyboardButton('–û–ø–ª–∞—Ç–∞ –≤–∑–Ω–æ—Å–∞'))
    markup.add(types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è'))
    bot.send_message(message.chat.id,"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup)
    bot.register_next_step_handler(message, send2, identify, club)


def send2(message, identify, club):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        admin(message)
        return

    if message.text == '–û–ø–ª–∞—Ç–∞ –≤–∑–Ω–æ—Å–∞':
        name, typ = '', ''
        cost, status = 0, 0
        if club:
            base = sqlite3.connect('mero')
            cur = base.cursor()
            base_info = sqlite3.connect('clubs')
            cur_info = base_info.cursor()

            try:
                cur_info.execute(f'SELECT * FROM {club} WHERE identify = ?', (identify,))
            except:
                bot.send_message(message.chat.id, "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç!", reply_markup=types.ReplyKeyboardRemove())
                cur.close()
                base.close()
                cur_info.close()
                base_info.close()
                return
            data = cur_info.fetchall()
            for i in data:
                name = i[2]
                status = i[6]
                cost = int(i[7])
                break

            try:
                cur.execute(f'SELECT * FROM {club + identify}')
            except:
                bot.send_message(message.chat.id, "‚ùå–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç!", reply_markup=types.ReplyKeyboardRemove())
                cur.close()
                base.close()
                cur_info.close()
                base_info.close()
                return
            players = cur.fetchall()
            payload = club + identify
        else:
            base = sqlite3.connect('tournament')
            cur = base.cursor()
            base_info = sqlite3.connect('tournaments_list')
            cur_info = base_info.cursor()

            cur_info.execute('SELECT * FROM tournaments WHERE identify = ?', (identify,))
            data = cur_info.fetchall()
            for i in data:
                name = i[2]
                typ = i[7]
                status = i[9]
                cost = int(i[10])
                break

            try:
                cur.execute(f'SELECT * FROM {identify}')
            except:
                bot.send_message(message.chat.id, "‚ùå–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç!", reply_markup=types.ReplyKeyboardRemove())
                cur.close()
                base.close()
                cur_info.close()
                base_info.close()
                return
            players = cur.fetchall()
            payload = identify

        cur.close()
        base.close()
        cur_info.close()
        base_info.close()

        if cost < 1:
            bot.send_message(message.chat.id, "‚ùå–£—á–∞—Å—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ!")
            return

        if players:
            if typ != 'team':
                if status != 2:
                    for i in players:
                        if not i[4]:  # paid
                            bot.send_invoice(i[1], 'üí∏–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', f'–í—ã - —É—á–∞—Å—Ç–Ω–∏–∫ {name.lower()}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤–∑–Ω–æ—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ', payload, settings['PAY_TOKEN'], 'RUB', [types.LabeledPrice("–û–ø–ª–∞—Ç–∏—Ç—å", cost * 100)])
                else:  # status == 2
                    for i in players:
                        if i[6] == 1 and not i[4]:  # requests and not paid
                            bot.send_invoice(i[1], 'üí∏–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', f'–í—ã - —É—á–∞—Å—Ç–Ω–∏–∫ {name.lower()}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤–∑–Ω–æ—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ', payload, settings['PAY_TOKEN'], 'RUB', [types.LabeledPrice("–û–ø–ª–∞—Ç–∏—Ç—å", cost*100)])
            else:  # typ = 'team'
                for i in players:
                    if status != 2:
                        if not i[4]:
                            bot.send_invoice(i[1], 'üí∏–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', f'–í—ã - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ {name.lower()}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤–∑–Ω–æ—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã', payload, settings['PAY_TOKEN'], 'RUB', [types.LabeledPrice("–û–ø–ª–∞—Ç–∏—Ç—å", cost*100)])
                    else:  # status == 2
                        if i[6] == 1 and not i[4]:
                            bot.send_invoice(i[1], 'üí∏–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', f'–í—ã - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ {name.lower()}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤–∑–Ω–æ—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã', payload, settings['PAY_TOKEN'], 'RUB', [types.LabeledPrice("–û–ø–ª–∞—Ç–∏—Ç—å", cost * 100)])
            bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        return

    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è':
        markup = types.InlineKeyboardMarkup()
        name = ''
        status = 0
        if club:
            base = sqlite3.connect('mero')
            cur = base.cursor()
            base_info = sqlite3.connect('clubs')
            cur_info = base_info.cursor()

            cur_info.execute(f'SELECT * FROM {club} WHERE identify = ?', (identify,))
            data = cur_info.fetchall()
            for i in data:
                name = i[2]
                status = i[6]
                break

            try:
                cur.execute(f'SELECT * FROM {club + identify}')
            except:
                bot.send_message(message.chat.id, "‚ùå–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç!", reply_markup=types.ReplyKeyboardRemove())
                cur.close()
                base.close()
                cur_info.close()
                base_info.close()
                return
            players = cur.fetchall()
            markup.add(types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', callback_data=club+identify+'confirm'))
        else:
            base = sqlite3.connect('tournament')
            cur = base.cursor()
            base_info = sqlite3.connect('tournaments_list')
            cur_info = base_info.cursor()

            cur_info.execute('SELECT * FROM tournaments WHERE identify = ?', (identify,))
            data = cur_info.fetchall()
            for i in data:
                name = i[2]
                status = i[9]
                break

            try:
                cur.execute(f'SELECT * FROM {identify}')
            except:
                bot.send_message(message.chat.id, "‚ùå–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç!", reply_markup=types.ReplyKeyboardRemove())
                cur.close()
                base.close()
                cur_info.close()
                base_info.close()
                return
            players = cur.fetchall()
            markup.add(types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', callback_data=identify+'confirm'))

        cur.close()
        base.close()
        cur_info.close()
        base_info.close()

        if status != 2:
            for i in players:
                bot.send_message(i[1], f'–í—ã - —É—á–∞—Å—Ç–Ω–∏–∫ {name.lower()}. ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ', reply_markup=markup)
        else:
            for i in players:
                if i[6] == 1:
                    bot.send_message(i[1], f'–í—ã - —É—á–∞—Å—Ç–Ω–∏–∫ {name.lower()}. ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ', reply_markup=markup)
        bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')
        return

    if club:
        base = sqlite3.connect('mero')
        cur = base.cursor()
        cur.execute(f'SELECT * FROM {club + identify}')
    else:
        base = sqlite3.connect('tournament')
        cur = base.cursor()
        cur.execute(f'SELECT * FROM {identify}')
    players = cur.fetchall()
    cur.close()
    base.close()
    for i in players:
        if i[1] != '0' and i[6] == 1:
            bot.send_message(i[1], message.text)
    bot.send_message(message.chat.id, "üéâ–£—Å–ø–µ—à–Ω–æ", reply_markup=types.ReplyKeyboardRemove(), message_effect_id='5107584321108051014')


'''@bot.message_handler(commands=['add'])
def creating_tables(message):
    base = sqlite3.connect('tournaments_list')
    cur = base.cursor()
    #clubs = ['DarkTurn', 'LETI', 'Polytech', 'Mining', 'EveningParty', 'TechnoMafia', 'BONCHMAFIA', 'BlackInside']
    #for club in clubs:
    cur.execute(f'ALTER TABLE tournaments ADD COLUMN distance TEXT NOT NULL DEFAULT {None}')
    base.commit()
    cur.close()
    base.close()

    #base = sqlite3.connect('users')
    #cur = base.cursor()
    #cur.execute('CREATE TABLE IF NOT EXISTS users (num INTEGER PRIMARY KEY, id TEXT NOT NULL, nick TEXT NOT NULL, club TEXT NOT NULL)')
    #base.commit()
    #cur.close()
    #base.close()

    base = sqlite3.connect('clubs')
    cur = base.cursor()
    clubs = ['DarkTurn', 'LETI', 'Polytech', 'Mining', 'EveningParty', 'TechnoMafia', 'BONCHMAFIA', 'BlackInside']
    for club in clubs:
        cur.execute(f'CREATE TABLE IF NOT EXISTS {club} (num INTEGER PRIMARY KEY, identify TEXT NOT NULL, name TEXT NOT NULL, desc TEXT NOT NULL, date TEXT NOT NULL, limits INTEGER, status INTEGER, cost INTEGER)')
        base.commit()
    cur.close()
    base.close()

    base = sqlite3.connect('tournaments_list')
    cur = base.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS tournaments (num INTEGER PRIMARY KEY, identify TEXT NOT NULL, name TEXT NOT NULL, desc TEXT NOT NULL, date TEXT NOT NULL, rules TEXT NOT NULL, score TEXT NOT NULL, type TEXT NOT NULL, limits INTEGER, status INTEGER, cost INTEGER)')
    base.commit()
    cur.close()
    base.close()

    bot.send_message(message.chat.id, '–£')'''


def donut1(message):
    bot.send_message(message.chat.id, "‚ù§–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å!!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å (60—Ä –∏ –±–æ–ª—å—à–µ)")
    bot.register_next_step_handler(message, donut2)


def donut2(message):
    try:
        int(message.text.strip())
    except:
        bot.send_message(message.chat.id, "‚ùå–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return
    if int(message.text.strip()) < 60:
        bot.send_message(message.chat.id, "‚ùå–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 60—Ä!")
        return
    bot.send_invoice(message.chat.id, '–î–æ–Ω–∞—Ç', '–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —Å—Ç—É–¥–ª–∏–≥–∏!', 'donut', settings['PAY_TOKEN'], 'RUB', [types.LabeledPrice("‚ù§", int(message.text)*100)])


@bot.message_handler()
def meow(message):
    if message.text.lower() == '–º—è—É':
        bot.reply_to(message, "–º—è—É")
        print(f"–ú—è—É –æ—Ç {message.from_user.first_name} {message.from_user.last_name}")
    if "send" in message.text:
         bot.send_message(-4691783391, message.text[5:])


while True:
    try:
        bot.polling(none_stop=True)
    except:
        pass
